"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5955],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var l=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,l,i=function(e,t){if(null==e)return{};var n,l,i={},a=Object.keys(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=l.createContext({}),c=function(e){var t=l.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=c(e.components);return l.createElement(o.Provider,{value:t},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},f=l.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),f=i,d=p["".concat(o,".").concat(f)]||p[f]||g[f]||a;return n?l.createElement(d,r(r({ref:t},u),{},{components:n})):l.createElement(d,r({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=f;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[p]="string"==typeof e?e:i,r[1]=s;for(var c=2;c<a;c++)r[c]=n[c];return l.createElement.apply(null,r)}return l.createElement.apply(null,n)}f.displayName="MDXCreateElement"},4118:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>g,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var l=n(7462),i=(n(7294),n(3905));const a={sidebar_position:3},r="Basic Usage",s={unversionedId:"quickstart/usage",id:"quickstart/usage",title:"Basic Usage",description:"By default, fetch-nft uses the public Opensea API and the Solana mainnet RPC endpoint. To configure API keys and endpoints, see Usage With Configs.",source:"@site/docs/quickstart/usage.mdx",sourceDirName:"quickstart",slug:"/quickstart/usage",permalink:"/fetch-nft/docs/quickstart/usage",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"quickstartSidebar",previous:{title:"Fetch Client",permalink:"/fetch-nft/docs/quickstart/fetch-client"},next:{title:"Main Functions",permalink:"/fetch-nft/docs/quickstart/main-functions"}},o={},c=[{value:"Fetch Client",id:"fetch-client",level:2},{value:"Main Functions",id:"main-functions",level:2},{value:"Output Types",id:"output-types",level:2},{value:"Collectible",id:"collectible",level:3},{value:"CollectibleState",id:"collectiblestate",level:3},{value:"Usage with Configs",id:"usage-with-configs",level:2}],u={toc:c},p="wrapper";function g(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,l.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"basic-usage"},"Basic Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { FetchNFTClient } from "@audius/fetch-nft";\n\n// Initialize fetch client\nconst fetchClient = new FetchNFTClient();\n\n// Fetching all collectibles for the given wallets\nfetchClient\n  .getCollectibles({\n    ethWallets: ["0x5A8443f456f490dceeAD0922B0Cc89AFd598cec9"],\n    solWallets: ["GrWNH9qfwrvoCEoTm65hmnSh4z3CD96SfhtfQY6ZKUfY"],\n  })\n  .then((res) => console.log(res));\n')),(0,i.kt)("p",null,"By default, fetch-nft uses the public Opensea API and the Solana mainnet RPC endpoint. To configure API keys and endpoints, see ",(0,i.kt)("a",{parentName:"p",href:"#usage-with-configs"},"Usage With Configs"),"."),(0,i.kt)("h2",{id:"fetch-client"},"Fetch Client"),(0,i.kt)("p",null,"FetchNFTClient is the primary interface for using the library. When initializing the client, you may optionally pass in configs for the Open Sea and Solana clients used internally."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"type OpenSeaClientProps = {\n  apiEndpoint?: string;\n  apiKey?: string;\n  assetLimit?: number;\n  eventLimit?: number;\n};\n\ntype SolanaClientProps = {\n  rpcEndpoint?: string;\n};\n\ntype FetchNFTClientProps = {\n  openSeaConfig?: OpenSeaClientProps;\n  solanaConfig?: SolanaClientProps;\n};\n")),(0,i.kt)("h2",{id:"main-functions"},"Main Functions"),(0,i.kt)("p",null,"Getting Ethereum collectibles:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"FetchNFTClient::getEthereumCollectibles(wallets: string[]) => Promise<CollectibleState>\n")),(0,i.kt)("p",null,"Getting Solana collectibles:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"FetchNFTClient::getSolanaCollectibles(wallets: string[]) => Promise<CollectibleState>\n")),(0,i.kt)("p",null,"Getting all collectibles:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"FetchNFTClient::getCollectibles({\n  ethWallets?: string[],\n  solWallets?: string[]\n}) => Promise<{\n  ethCollectibles: CollectibleState\n  solCollectibles: CollectibleState\n}>\n")),(0,i.kt)("h2",{id:"output-types"},"Output Types"),(0,i.kt)("h3",{id:"collectible"},"Collectible"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"type Collectible = {\n  id: string;\n  tokenId: string;\n  name: string | null;\n  description: string | null;\n  mediaType: CollectibleMediaType;\n  frameUrl: string | null;\n  imageUrl: string | null;\n  gifUrl: string | null;\n  videoUrl: string | null;\n  threeDUrl: string | null;\n  isOwned: boolean;\n  dateCreated: string | null;\n  dateLastTransferred: string | null;\n  externalLink: string | null;\n  permaLink: string | null;\n  assetContractAddress: string | null;\n  chain: Chain;\n  wallet: string;\n};\n")),(0,i.kt)("h3",{id:"collectiblestate"},"CollectibleState"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"type CollectibleState = {\n  [wallet: string]: Collectible[];\n};\n")),(0,i.kt)("h2",{id:"usage-with-configs"},"Usage with Configs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { FetchNFTClient } from '@audius/fetch-nft'\n\n// Open Sea Config\nconst openSeaConfig = {\n    apiEndpoint: '...',\n    apiKey: '...',\n    assetLimit: 50,\n    eventLimit: 300\n}\n\n// Solana Config\nconst solanaConfig = {\n    rpcEndpoint: '...'\n}\n\n// Initialize fetch client with configs\nconst fetchClient = new FetchNFTClient({ openSeaConfig, solanaConfig })\n\n// Fetching Ethereum collectibles for the given wallets\nfetchClient.getEthereumCollectibles([...]).then(res => console.log(res))\n\n// Fetching Solana collectibles for the given wallets\nfetchClient.getSolanaCollectibles([...]).then(res => console.log(res))\n")))}g.isMDXComponent=!0}}]);